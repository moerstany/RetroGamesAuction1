// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace RetroGamesAuction1.Models;

public partial class DataApplicationDbContext : DbContext
{
    public DataApplicationDbContext(DbContextOptions<DataApplicationDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }

    public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }

    public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }

    public virtual DbSet<Auction> Auction { get; set; }

    public virtual DbSet<Auctionbid> Auctionbid { get; set; }

    public virtual DbSet<Product> Product { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("ru_RU.utf8");

        modelBuilder.Entity<AspNetRoleClaims>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_aspnetroleclaims");

            entity.Property(e => e.Id).UseIdentityAlwaysColumn();

            entity.HasOne(d => d.Role).WithMany(p => p.AspNetRoleClaims).HasConstraintName("fk_aspnetroleclaims_aspnetroles_roleid");
        });

        modelBuilder.Entity<AspNetRoles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_aspnetroles");

            entity.HasIndex(e => e.NormalizedName, "rolenameindex")
                .IsUnique()
                .HasFilter("(\"NormalizedName\" IS NOT NULL)");
        });

        modelBuilder.Entity<AspNetUserClaims>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_aspnetuserclaims");

            entity.Property(e => e.Id).UseIdentityAlwaysColumn();

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserClaims).HasConstraintName("fk_aspnetuserclaims_aspnetusers_userid");
        });

        modelBuilder.Entity<AspNetUserLogins>(entity =>
        {
            entity.HasKey(e => new { e.LoginProvider, e.ProviderKey }).HasName("pk_aspnetuserlogins");

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserLogins).HasConstraintName("fk_aspnetuserlogins_aspnetusers_userid");
        });

        modelBuilder.Entity<AspNetUserTokens>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name }).HasName("pk_aspnetusertokens");

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserTokens).HasConstraintName("fk_aspnetusertokens_aspnetusers_userid");
        });

        modelBuilder.Entity<AspNetUsers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_aspnetusers");

            entity.HasMany(d => d.Role).WithMany(p => p.User)
                .UsingEntity<Dictionary<string, object>>(
                    "AspNetUserRoles",
                    r => r.HasOne<AspNetRoles>().WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_aspnetuserroles_aspnetroles_roleid"),
                    l => l.HasOne<AspNetUsers>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnetuserroles_aspnetusers_userid"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId").HasName("pk_aspnetuserroles");
                        j.IndexerProperty<string>("UserId").HasMaxLength(450);
                        j.IndexerProperty<string>("RoleId").HasMaxLength(450);
                    });
        });

        modelBuilder.Entity<Auction>(entity =>
        {
            entity.HasKey(e => e.IdAuction).HasName("auction_pkey");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.Auction)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("auction_id_product_fkey");
        });

        modelBuilder.Entity<Auctionbid>(entity =>
        {
            entity.HasKey(e => e.IdAuctionbid).HasName("auctionbid_pkey");

            entity.Property(e => e.Datatime).HasDefaultValueSql("CURRENT_TIMESTAMP");

            entity.HasOne(d => d.IdClientNavigation).WithMany(p => p.Auctionbid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("auctionbid_id_client_fkey");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.Auctionbid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("auctionbid_id_product_fkey");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.IdProduct).HasName("id_product");

            entity.Property(e => e.IdProduct).UseIdentityAlwaysColumn();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}